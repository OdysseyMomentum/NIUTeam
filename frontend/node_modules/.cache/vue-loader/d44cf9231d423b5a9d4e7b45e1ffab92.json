{"remainingRequest":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erfalk/ws_filedgr/filedgr-streams-front/src/components/Details.vue?vue&type=style&index=0&id=5b31aba0&lang=scss&scoped=true&","dependencies":[{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/src/components/Details.vue","mtime":1605397947167},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2FyZC1jb250ZW50IHsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Cg=="},{"version":3,"sources":["Details.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqSA;AACA;AACA","file":"Details.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"card info\">\n    <Map/>\n    <div class=\"card-content\">\n      <p class=\"title\">\n        {{ this.object.displayName }}\n      </p>\n      <b-tabs type=\"is-boxed\">\n        <b-tab-item label=\"Object\" icon=\"home\">\n          <fieldset>\n            <div class=\"columns is-mobile is-multiline\">\n              <div class=\"column is-full pt-0\">\n                <label><strong>UOI</strong></label\n                ><input class=\"input\" readonly v-model=\"this.object.uoi\"/>\n              </div>\n              <div class=\"column is-full pt-0\">\n                <label><strong>Description</strong></label\n                ><input readonly class=\"input\" v-model=\"this.object.description\"/>\n              </div>\n              <div class=\"column is-four-fifths pt-0\">\n                <label><strong>Street Name</strong></label\n                ><input\n                name=\"street\"\n                class=\"input\"\n                readonly\n                v-model=\"this.object.streetName\"\n              />\n              </div>\n              <div class=\"column is-one-fifths pt-0\">\n                <label><strong>Number</strong></label\n                ><input class=\"input\" readonly v-model=\"this.object.streetNumber\"/>\n              </div>\n              <div class=\"column is-four-fifths pt-0 pt-0\">\n                <label><strong>City</strong></label\n                ><input class=\"input\" readonly v-model=\"this.object.city\"/>\n              </div>\n              <div class=\"column is-one-fifths pt-0\">\n                <label><strong>Zipcode</strong></label\n                ><input class=\"input\" readonly v-model=\"this.object.zipcode\"/>\n              </div>\n              <div class=\"column is-full pt-0\">\n                <label><strong>Country</strong></label\n                ><input class=\"input\" readonly v-model=\"this.object.country\"/>\n              </div>\n            </div>\n          </fieldset>\n        </b-tab-item>\n        <b-tab-item label=\"Sensors\" icon=\"leak\">\n          <div class=\"columns is-multiline\">\n            <div class=\"column is-one-fifth field\">\n              <b-button class=\"  is-ghost is-fullwidth mb-2\" v-for=\"resources in this.getSensors()\"\n                        :key=\"resources.resourceId\" :label=\"resources.displayName\"\n                        @click=\"getSensorData(resources.resourceId, startTime, endTime)\"></b-button>\n            </div>\n            <div class=\"column is-four-fifths\">\n              <div class=\"columns is-multiline\">\n                <div class=\"column is-one-third\">\n                  <b-field custom-class=\"is-small\" horizontal label=\"Start:\">\n                    <b-datetimepicker v-model=\"startTime\"\n                                      size=is-small\n                                      horizontal-time-picker='true'\n                                      :max-datetime=\"maxDatetime\"\n                                      placeholder=\"Start Date...\">\n                    </b-datetimepicker>\n                  </b-field>\n                </div>\n                <div class=\"column is-one-third\">\n                  <b-field custom-class=\"is-small\" horizontal label=\"End:\">\n                    <b-datetimepicker v-model=\"endTime\"\n                                      size=is-small\n                                      horizontal-time-picker='true'\n                                      :max-datetime=\"maxDatetime\"\n                                      placeholder=\"End Date...\">\n                    </b-datetimepicker>\n                  </b-field>\n                </div>\n                <div class=\"column is-2\">\n                  <b-button @click=\"getSensorData($store.state.cachedSensorID, startTime, endTime )\"\n                            class=\"is-small is-fullwidth\">Refresh\n                  </b-button>\n                </div>\n                <div class=\"column\">\n                  <Chart class=\"ml-6\" :key=\"rerenderKey\" v-if=\"loaded\"/>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </b-tab-item>\n        <b-tab-item label=\"Documents\" icon=\"file-document-outline\">\n          <a class=\"panel-block\" v-for=\"resources in this.getDocuments()\"\n             :key=\"resources.resourceId\"\n             :href=\"resources.meta.access\"\n             @click=\"startDownload( resources.resourceId )\">\n            <b-icon v-if=\"resources.meta.filetype === '.pdf'\" icon=\"file-pdf-box\" aria-hidden=\"true\"/>\n            <b-icon v-else-if=\"resources.meta.filetype === '.docx' || resources.meta.filetype === '.doc'\"\n                    icon=\"file-word-box\" aria-hidden=\"true\"/>\n            <b-icon v-else-if=\"resources.meta.filetype === '.xlsx' || resources.meta.filetype === '.xlsx'\"\n                    icon=\"file-excel-box\" aria-hidden=\"true\"/>\n            <b-icon v-else-if=\"resources.meta.filetype === '.pptx' || resources.meta.filetype === '.ppt'\"\n                    icon=\"file-powerpoint-box\" aria-hidden=\"true\"/>\n            <b-icon v-else-if=\"resources.meta.filetype === '.png' || resources.meta.filetype === '.jpg'\"\n                    icon=\"file-image\" aria-hidden=\"true\"/>\n            {{ resources.meta.filename }} {{ resources.meta.filesize | prettyBytes(2, false, 'MB') }}\n          </a>\n        </b-tab-item>\n        <b-tab-item label=\"Weather\" icon=\"weather-partly-cloudy\">\n          <Weather/>\n        </b-tab-item>\n        <b-tab-item label=\"Add User\" icon=\"account-plus\">\n          <div class=\"column is-one-third\">\n          <b-field>\n            <template slot=\"label\">\n              Email\n              <b-tooltip type=\"is-white\" label=\"Add a User to see your Object\">\n                <b-icon size=\"is-small\" icon=\"help-circle-outline\"></b-icon>\n              </b-tooltip>\n            </template>\n            <b-input placeholder=\"Email...\" v-model=\"newUserEmail\" ></b-input>\n          </b-field>\n            <b-button @click=\"addUser()\" type=\"is-success is-pulled-right mt-4\"\n            >+\n            </b-button\n            >\n          </div>\n        </b-tab-item>\n      </b-tabs>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport 'leaflet/dist/leaflet.css'\nimport Chart from '@/components/plots/Chart.vue'\nimport Map from '@/components/Map.vue'\nimport Weather from '@/components/Weather.vue'\nimport { Component, Vue } from 'vue-property-decorator'\nimport { IDocumentMeta, IResourceType } from '@/types/ResourceType'\nimport { IObjectType } from '@/types/ObjectType'\nimport { ISensorDataType } from '@/types/SensorDataType'\n\n@Component({\n  components: {\n    Map,\n    Weather,\n    Chart\n  }\n})\nexport default class Details extends Vue {\n  private newUserEmail = ''\n  private objectResources: IResourceType[]\n  private object: IObjectType\n  private rerenderKey = 0\n  public loaded = false\n\n  private endTime = new Date()\n  private startTime = new Date(Date.now() - 43200 * 1000)\n  private maxDatetime = new Date()\n\n  constructor () {\n    super()\n    this.objectResources = this.$store.state.resources\n    this.object = this.$store.state.object\n  }\n\n  private successUserAdd () {\n    this.$buefy.toast.open({\n      message: 'User ' + this.newUserEmail + ' added!',\n      type: 'is-success',\n      position: 'is-bottom'\n    })\n  }\n\n  private async addUser () {\n    const accessToken = await this.$auth.getTokenSilently({})\n    fetch(encodeURI('/api/user/addToObject'), {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      },\n      body: JSON.stringify({\n        object: {\n          uoi: this.object.uoi\n        },\n        user: {\n          email: this.newUserEmail\n        }\n      })\n    }).then(async response => {\n      const data = await response.json() as JSON\n      console.log(data)\n      this.successUserAdd()\n    })\n      .catch(error => {\n        console.error('There was an error!', error)\n      })\n  }\n\n  private async getSensorData (resourceId: number, startTime: Date, endTime: Date) {\n    this.$store.state.cachedSensorID = resourceId\n    const accessToken = await this.$auth.getTokenSilently({})\n    fetch(encodeURI('/api/telemetry/get'), {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      },\n      body: JSON.stringify({\n        object: {\n          uoi: this.object.uoi\n        },\n        resource: {\n          resourceId: resourceId\n        },\n        // range: {\n        //   begin: Math.round(Date.now() / 1000 - 43200),\n        //   end: Math.round(Date.now() / 1000)\n        // }\n        range: {\n          begin: Math.round(startTime.getTime() / 1000),\n          end: Math.round(endTime.getTime() / 1000)\n        }\n\n      })\n    }).then(async response => {\n      const sensorData: ISensorDataType[] = await response.json() as ISensorDataType\n\n      this.$store.state.chartData.timestamp = sensorData.map(i => i.timestamp * 1000)\n      this.$store.state.chartData.altitude = sensorData.map(i => i.altitude)\n      this.$store.state.chartData.co2_conc = sensorData.map(i => i.co2_conc)\n      this.$store.state.chartData.humidity = sensorData.map(i => i.humidity)\n      this.$store.state.chartData.illuminance = sensorData.map(i => i.illuminance)\n      this.$store.state.chartData.motion_count = sensorData.map(i => i.motion_count)\n      this.$store.state.chartData.pressure = sensorData.map(i => i.pressure)\n      this.$store.state.chartData.sound_level = sensorData.map(i => i.sound_level)\n      this.$store.state.chartData.temperature = sensorData.map(i => i.temperature)\n      this.$store.state.chartData.voc_conc = sensorData.map(i => i.voc_conc)\n      this.loaded = true\n      this.rerenderKey += 1\n    })\n      .catch(error => {\n        console.error('There was an error!', error)\n      })\n  }\n\n  private async startDownload (resourceId: string) {\n    console.log('Downloading: ' + resourceId)\n    const accessToken = await this.$auth.getTokenSilently({})\n    fetch(encodeURI('/api/resource/get'), {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + accessToken\n      },\n      body: JSON.stringify({\n        object: {\n          uoi: this.object.uoi\n        },\n        resource: {\n          resourceId: resourceId\n        }\n\n      })\n    }).then(async response => {\n      const resource: IResourceType = await response.json() as IResourceType\n      const resourceMeta = resource.meta as IDocumentMeta\n\n      if (resourceMeta.access !== undefined) {\n        if (resourceMeta.filetype === '.jpg' ||\n          resourceMeta.filetype === '.jpeg' ||\n          resourceMeta.filetype === '.png' ||\n          resourceMeta.filetype === '.pdf' ||\n          resourceMeta.filetype === '.svg') {\n          window.open(resourceMeta.access, '_blank')\n        } else {\n          window.open(resourceMeta.access)\n        }\n      }\n    })\n      .catch(error => {\n        console.error('There was an error!', error)\n      })\n  }\n\n  private getDocuments (): IResourceType[] {\n    return this.objectResources.filter(r => (r.resourceType === 'DOCUMENT' && r.meta != null))\n  }\n\n  private getSensors (): IResourceType[] {\n    return this.objectResources.filter(r => (r.resourceType === 'SENSOR'))\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.card-content {\n  text-align: left;\n}\n</style>\n"]}]}