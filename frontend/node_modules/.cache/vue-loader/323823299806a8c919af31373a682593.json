{"remainingRequest":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erfalk/ws_filedgr/filedgr-streams-front/src/components/plots/LineChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/src/components/plots/LineChart.vue","mtime":1603804284793},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erfalk/ws_filedgr/filedgr-streams-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNoYXJ0IHsKICBwYWRkaW5nOiAxZW07CiAgZmxvYXQ6IGxlZnQ7CiAgbWFyZ2luOiAxZW07CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsKfQoKLnAgewogIHRleHQtYWxpZ246IGNlbnRlcjsKfQo="},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components/plots","sourcesContent":["<template>\n<div class=\"chart\">\n  <figure id=\"lineChart\"></figure>\n  <button @click=\"reDraw\">Click me!</button>\n</div>\n</template>\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator'\nimport * as d3 from 'd3'\n\n@Component({})\nexport default class LineChart extends Vue {\n  private data = [\n    { price: 40129, year: 2009 },\n    { price: 166443, year: 2010 },\n    { price: 150793, year: 2012 },\n    { price: 62342, year: 2014 },\n    { price: 27647, year: 2016 },\n    { price: 30000, year: 2017 }\n  ];\n\n  private svg: any;\n  private d?: number;\n  private margin = 50;\n  private width = 750 - (this.margin * 2);\n  private height = 400 - (this.margin * 2);\n\n  private createSvg (): void {\n    this.svg = d3.select('#lineChart')\n      .append('svg')\n      .attr('width', this.width + (this.margin * 2))\n      .attr('height', this.height + (this.margin * 2))\n      .append('g')\n      .attr('transform', 'translate(' + this.margin + ',' + this.margin + ')')\n  }\n\n  private drawPlot (inputData: any[]): void {\n    const price = inputData.map(item => parseInt(item.price))\n    const year = inputData.map(item => item.year)\n    const priceMin = Math.min(...price)\n    const priceMax = Math.max(...price)\n\n    // Add X axis\n    const x = d3.scaleLinear()\n      .domain([2009, 2017])\n      .range([0, this.width])\n    this.svg.append('g')\n      .attr('transform', 'translate(0,' + this.height + ')')\n      .call(d3.axisBottom(x).tickFormat(d3.format('d')))\n\n    // Add Y axis\n    const y = d3.scaleLinear()\n      .domain([0, priceMax])\n      .range([this.height, 0])\n    this.svg.append('g')\n      .call(d3.axisLeft(y))\n\n    // Add line\n    this.svg.append('path')\n      .datum(inputData)\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('stroke-width', 2)\n      .attr('d', d3.line()\n        // .curve(d3.curveNatural)\n        .x(function (d: any) { return x(d.year) })\n        .y(function (d: any) { return y(d.price) })\n      )\n\n    // Add dots\n    const dots = this.svg.append('g')\n    dots.selectAll('dot')\n      .data(inputData)\n      .enter()\n      .append('circle')\n      .attr('cx', (d: { year: any}) => x(d.year))\n      .attr('cy', (d: { price: any}) => y(d.price))\n      .attr('r', 3)\n      // .style('opacity', 0.5)\n\n    this.svg.append('text')\n      .attr('x', (this.width / 2))\n      .attr('y', 0 - (this.margin / 2))\n      .attr('text-anchor', 'middle')\n      .text('Price')\n  }\n\n  private clearPlot () {\n    d3.select('svg').remove()\n  }\n\n  private reDraw (): void {\n    this.clearPlot()\n    this.createSvg()\n    this.drawPlot(\n      [\n        { price: 40000 * Math.random(), year: 2009 },\n        { price: 40000 * Math.random(), year: 2010 },\n        { price: 40000 * Math.random(), year: 2012 },\n        { price: 40000 * Math.random(), year: 2014 },\n        { price: 40000 * Math.random(), year: 2016 },\n        { price: 40000 * Math.random(), year: 2017 }\n      ]\n    )\n  }\n\n  mounted () {\n    this.createSvg()\n    this.drawPlot(this.data)\n  }\n}\n</script>\n\n<style>\n.chart {\n  padding: 1em;\n  float: left;\n  margin: 1em;\n  background-color: #f8f8f8;\n}\n\n.p {\n  text-align: center;\n}\n</style>\n"]}]}